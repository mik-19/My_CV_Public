
function q(name, fallback=null){const url=new URL(window.location.href); return url.searchParams.get(name) ?? fallback;}
async function fetchData(url){const res=await fetch(url,{cache:'no-store'}); if(!res.ok) throw new Error('Fetch failed: '+res.status); const txt=await res.text(); const looksJson=(res.headers.get('content-type')||'').includes('application/json')||url.endsWith('.json'); if(looksJson){return JSON.parse(txt);} if(typeof jsyamlLite==='undefined') throw new Error('YAML parser missing'); return jsyamlLite.load(txt);}
function el(tag, attrs={}, children=[]){const node=document.createElement(tag); for(const [k,v] of Object.entries(attrs)){if(k==='class') node.className=v; else if(k.startsWith('on')&&typeof v==='function') node.addEventListener(k.substring(2),v); else node.setAttribute(k,v);} (Array.isArray(children)?children:[children]).forEach(c=>node.appendChild(typeof c==='string'?document.createTextNode(c):c)); return node;}
function section(title, bodyNodes){return el('div',{class:'section'},[ el('div',{class:'section-header'}, title), el('div',{class:'section-body'}, bodyNodes)]);}
function textOrList(container, items){if(!items) return; if(Array.isArray(items)){const ul=el('ul'); items.forEach(x=>ul.appendChild(el('li',{}, String(x)))); container.appendChild(ul);} else{container.appendChild(el('div',{}, String(items)));}}
function navBar(){return el('div',{class:'nav site-only'},[
  el('a',{href:`page-home.html${window.location.search}`},'Home'),
  el('a',{href:`page-experience.html${window.location.search}`},'Experience'),
  el('a',{href:`page-projects.html${window.location.search}`},'Projects'),
  el('a',{href:`page-education.html${window.location.search}`},'Education'),
  el('a',{href:`page-cv.html${window.location.search}`},'Print CV'),
  el('a',{href:`https://mpl-mycv-ba-app.streamlit.app`,target:'_blank',rel:'noopener'},'Chat with ReZoomA')
]);}
function renderHome(data, root, mode){const c=el('div',{class:'container'}); c.appendChild(navBar()); c.appendChild(el('h1',{}, data.header_info?.name||'')); const meta=el('div',{class:'small'}); meta.textContent=[data.header_info?.address, data.header_info?.phone, data.header_info?.email, data.header_info?.languages].filter(Boolean).join(' • '); c.appendChild(meta);
  c.appendChild(section('Professional Summary', el('div',{}, (data[mode]?.professional_summary)||'')));
  const skills=data[mode]?.skills||[]; if(skills.length){const cols=el('div',{class:'columns'}); const mid=Math.ceil(skills.length/2); [skills.slice(0,mid), skills.slice(mid)].forEach(arr=>{const col=el('div',{}); textOrList(col, arr); cols.appendChild(col);}); c.appendChild(section('Core Skills & Expertise', cols)); }
  const exp=data[mode]?.professional_experience||[]; if(exp.length){const wrap=el('div',{}); exp.forEach(role=>{const card=el('div',{class:'card'}); card.appendChild(el('div',{class:'small'}, `${role.title||''} — ${role.company||''} (${role.dates||''})`)); textOrList(card, role.highlights||role.responsibilities); wrap.appendChild(card);}); c.appendChild(section('Professional Experience', wrap)); }
  root.appendChild(c); }
function renderExperience(data, root, mode){const c=el('div',{class:'container'}); c.appendChild(navBar()); c.appendChild(el('h1',{},'Detailed Experience')); const exp=data.detailed?.professional_experience||[]; const wrap=el('div',{}); exp.forEach(role=>{const det=el('details',{class:'collapse'}); const sum=el('summary',{},[ el('span',{}, role.title||''), el('span',{class:'small'}, `  •  ${role.company||''} • ${role.dates||''}`) ]); det.appendChild(sum); const body=el('div',{class:'content'}); if(role.summary) body.appendChild(el('div',{}, role.summary)); if(role.responsibilities) textOrList(body, role.responsibilities); det.appendChild(body); wrap.appendChild(det);}); c.appendChild(section('Roles', wrap)); root.appendChild(c); }
function renderProjects(data, root, mode){const c=el('div',{class:'container'}); c.appendChild(navBar()); c.appendChild(el('h1',{},'Key Achievements & Projects')); const list=(data[mode]?.key_achievements_and_projects)||(data.detailed?.key_achievements_and_projects); const wrap=el('div',{}); const items=Array.isArray(list?.detailed)?list.detailed:Array.isArray(list)?list:[]; items.forEach(p=>{const card=el('div',{class:'card'}); if(typeof p==='string'){card.appendChild(el('div',{},p));} else{ if(p.title) card.appendChild(el('h2',{},p.title)); if(p.description) card.appendChild(el('div',{},p.description)); if(p.details) textOrList(card, p.details);} wrap.appendChild(card);}); c.appendChild(section('Projects', wrap)); root.appendChild(c); }
function renderEducation(data, root, mode){const c=el('div',{class:'container'}); c.appendChild(navBar()); c.appendChild(el('h1',{},'Education & Development')); const ed=data[mode]?.education||data.detailed?.education||[]; const wrap=el('div',{}); ed.forEach(e=>{const card=el('div',{class:'card'}); if(typeof e==='string'){card.appendChild(el('div',{},e));} else{ if(e.degree) card.appendChild(el('h2',{},e.degree)); const line=[e.institution, e.period].filter(Boolean).join(' • '); if(line) card.appendChild(el('div',{class:'small'},line)); if(e.description) card.appendChild(el('div',{},e.description)); } wrap.appendChild(card);}); c.appendChild(section('Education & Qualifications', wrap)); root.appendChild(c); }
function renderCV(data, root){const concise=data.concise||{}; const p1=el('div',{class:'page'}); const p2=el('div',{class:'page'}); p1.appendChild(el('h1',{}, data.header_info?.name||'')); const meta=el('div',{class:'small'}); meta.textContent=[data.header_info?.address,data.header_info?.phone,data.header_info?.email,data.header_info?.languages].filter(Boolean).join(' • '); p1.appendChild(meta);
  p1.appendChild(section('Professional Summary', el('div',{}, concise.professional_summary||'')));
  const exp=concise.professional_experience||[]; const expWrap=el('div',{}); exp.slice(0,3).forEach(role=>{const block=el('div',{}); block.appendChild(el('div',{class:'small'}, `${role.title||''} — ${role.company||''} (${role.dates||''})`)); textOrList(block, (role.highlights||role.responsibilities||[]).slice(0,4)); expWrap.appendChild(block);}); p1.appendChild(section('Professional Experience', expWrap)); const skills=concise.skills||[]; const skillsWrap=el('div',{class:'columns'}); const mid=Math.ceil(skills.length/2); [skills.slice(0,mid), skills.slice(mid)].forEach(arr=>{const col=el('div',{}); textOrList(col, arr); skillsWrap.appendChild(col);}); p1.appendChild(section('Core Skills & Expertise', skillsWrap)); const ed=concise.education||[]; const edWrap=el('div',{}); textOrList(edWrap, ed); p2.appendChild(section('Education & Professional Development', edWrap)); const proj=concise.key_achievements_and_projects||[]; const projWrap=el('div',{}); textOrList(projWrap, proj.slice(0,10)); p2.appendChild(section('Key Achievements & Projects', projWrap)); root.appendChild(p1); root.appendChild(p2); }
(async function(){const root=document.getElementById('app'); const dataUrl=q('data','https://raw.githubusercontent.com/mik-19/My_CV_Sites/main/cv_data_unified.yaml'); const page=q('page','home'); const mode=q('mode','concise'); let data; try{ data=await fetchData(dataUrl);} catch(err){ root.appendChild(el('div',{class:'container'},[ el('h1',{},'Failed to load data'), el('div',{class:'card'}, String(err)), el('div',{class:'small mono'}, dataUrl) ])); return; } switch(page){case 'home': renderHome(data, root, mode); break; case 'experience': renderExperience(data, root, mode); break; case 'projects': renderProjects(data, root, mode); break; case 'education': renderEducation(data, root, mode); break; case 'cv': renderCV(data, root); break; default: renderHome(data, root, mode); }})();
